# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The test-e2e action does not check out the repo. Instead, it triggers the e2e
# Cloud Build using this action's commit SHA, then waits for the cloud build
# run to complete.
#
# This action uses a Cloud Build trigger rather than `gcloud build submit`
# because we want Cloud Build to check out the repo. We don't want to upload
# the source from this github action.
#
# We don't want e2e build log to be printed in this Github Action's log
# because it may contain secrets.
#
name: test-e2e
on:
  pull_request_target:
    types: [labeled]
jobs:
  build:
    if: "${{ github.event.action != 'labeled' || github.event.label.name == 'e2e: run' }}"
    name: E2E test on Google Cloud
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Remove PR Label
        if: "${{ github.event.action == 'labeled' && github.event.label.name == 'e2e: run' }}"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                name: 'e2e: run',
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });
            } catch (e) {
              console.log('Failed to remove label. Another job may have already removed it!');
            }

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1.0.0'
        with:
          workload_identity_provider: ${{ secrets.PROVIDER_NAME }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          access_token_lifetime: 600s
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          create_credentials_file: true

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - id: 'rune2e'
        name: 'Start E2E test using Cloud Build'
        run: |
          set -x
          # Use --billing-project flag until WIF project enables the cloud build API
          gcloud builds triggers run e2e-test-pr-manual \
            --sha ${{ github.event.pull_request.head.sha }} \
            --billing-project ${{secrets.GOOGLE_CLOUD_PROJECT}} \
            --project=${{secrets.GOOGLE_CLOUD_PROJECT}} \
            --format="value(metadata.build.id)" > build-id.txt
          set +x
          echo
          echo "View build logs in Google Cloud Console: "
          gcloud builds describe $build_id \
              --project ${{secrets.GOOGLE_CLOUD_PROJECT}} \
              --billing-project ${{secrets.GOOGLE_CLOUD_PROJECT}} \
              --format="value(logUrl)"
      - id: 'waite2e'
        name: 'Wait for E2E test on Cloud Build to complete'
        run: |
          build_id=$(cat build-id.txt)
          echo "Build ID: $build_id" 
          echo 
          echo "This Github Action will now poll for build completion..."
          echo 

          # Wait for build to finish
          while true ; do 
            gcloud builds describe $build_id \
              --project ${{secrets.GOOGLE_CLOUD_PROJECT}} \
              --billing-project ${{secrets.GOOGLE_CLOUD_PROJECT}} \
              --format="value(status)" > status.txt
          
            s=$(cat status.txt)
          
            echo "Build Status $(date '+%Y-%m-%dT%H:%M:%S%z') $s" 
          
            if [[ $s == "QUEUED" || $s == "WORKING" ]] ; then 
              sleep 30
            elif [[ $s == "SUCCESS" ]] ; then 
              exit 0
            elif [[ $s == "CANCELLED" ]] ; then
              echo "The Cloud Build job was canceled."
              exit 1
            else
              echo "Build failed"
              exit 1
            fi
          done
